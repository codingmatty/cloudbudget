{"version":3,"sources":["../../src/db/account.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,gBAAgB,qBAAW;AAC/B,QAAM,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,WAAW,CAAX,EAAtC;AACA,SAAO,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,WAAW,CAAX,EAAvC;AACA,QAAM,EAAE,MAAM,MAAN,EAAc,MAAM,CAAC,SAAD,EAAY,UAAZ,EAAwB,aAAxB,EAAuC,MAAvC,EAA+C,YAA/C,CAAN,EAAoE,UAAU,IAAV,EAA1F;AACA,UAAQ,EAAE,MAAM,OAAN,EAAe,UAAU,IAAV,EAAzB;AACA,SAAO,MAAP;AACA,QAAM,EAAE,MAAM,iBAAO,KAAP,CAAa,QAAb,EAAuB,KAAK,MAAL,EAAa,UAAU,IAAV,EAAlD;CANoB,EAOnB;AACD,UAAQ,4BAAR;CARoB,CAAhB;;AAWN,cAAc,MAAd,CAAqB,eAArB,EAAsC,YAAM;AAC1C,SAAO,CAAC,MAAD,CAAP,CAD0C;CAAN,CAAtC;;AAIA,cAAc,OAAd,CAAsB,eAAtB,GAAwC,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AACrE,MAAM,UAAU,IAAV,CAD+D;AAErE,iBAAY,IAAZ,CAAiB,EAAE,SAAS,QAAQ,EAAR,EAA5B,EAA0C,UAAC,GAAD,EAAM,YAAN,EAAuB;AAC/D,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP,CAAT;AACA,SAAK,IAAL,EAAW,YAAX,EAF+D;GAAvB,CAA1C,CAFqE;CAA/B;;AAQxC,cAAc,OAAd,CAAsB,UAAtB,GAAmC,SAAS,UAAT,CAAoB,IAApB,EAA0B;AAC3D,MAAM,UAAU,IAAV,CADqD;AAE3D,UAAQ,eAAR,CAAwB,UAAC,GAAD,EAAM,YAAN,EAAuB;AAC7C,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP,CAAT;AACA,SAAK,IAAL,EAAW,iBAAE,GAAF,CAAM,YAAN,EAAoB,QAApB,CAAX,EAF6C;GAAvB,CAAxB,CAF2D;CAA1B;;AAQnC,IAAM,UAAU,mBAAS,KAAT,CAAe,SAAf,EAA0B,aAA1B,CAAV;;AAEN,QAAQ,MAAR,CAAe,IAAf,CAAoB,QAApB,EAA8B,UAAC,OAAD,EAAU,IAAV,EAAmB;;AAE/C,UAAQ,eAAR,CAAwB,UAAC,GAAD,EAAM,YAAN,EAAuB;AAC7C,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP,CAAT;AACA,oBAAM,IAAN,CAAW,YAAX,EAAyB,UAAC,WAAD,EAAc,IAAd,EAAuB;AAC9C,kBAAY,MAAZ,CAAmB,IAAnB,EAD8C;KAAvB,EAEtB,IAFH,EAF6C;GAAvB,CAAxB,CAF+C;CAAnB,CAA9B;;kBAUe","file":"account.js","sourcesContent":["import _ from 'lodash';\nimport async from 'async';\nimport mongoose, { Schema } from 'mongoose';\nimport { defaultJSONOptions, Transaction } from './';\n\nconst accountSchema = new Schema({\n  name: { type: String, required: true, minlength: 1 },\n  group: { type: String, required: true, minlength: 1 },\n  type: { type: String, enum: ['savings', 'checking', 'credit_card', 'loan', 'investment'], required: true },\n  budget: { type: Boolean, required: true },\n  notes: String,\n  user: { type: Schema.Types.ObjectId, ref: 'User', required: true }\n}, {\n  toJSON: defaultJSONOptions()\n});\n\naccountSchema.static('readonlyProps', () => {\n  return ['user'];\n});\n\naccountSchema.methods.getTransactions = function getTransactions(done) {\n  const account = this;\n  Transaction.find({ account: account.id }, (err, transactions) => {\n    if (err) return done(err);\n    done(null, transactions);\n  });\n};\n\naccountSchema.methods.getBalance = function getBalance(done) {\n  const account = this;\n  account.getTransactions((err, transactions) => {\n    if (err) return done(err);\n    done(null, _.sum(transactions, 'amount'));\n  });\n};\n\nconst Account = mongoose.model('Account', accountSchema);\n\nAccount.schema.post('remove', (account, next) => {\n  // Remove all transactions that are apart of this account\n  account.getTransactions((err, transactions) => {\n    if (err) return next(err);\n    async.each(transactions, (transaction, done) => {\n      transaction.remove(done);\n    }, next);\n  });\n});\n\nexport default Account;\n"]}