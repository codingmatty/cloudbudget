{"version":3,"sources":["../../src/db/account.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,aAAa,GAAG,cAHH,MAAM,CAGQ;AAC/B,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AACtC,OAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;AACvC,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC1G,QAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AACzC,OAAK,EAAE,MAAM;AACb,MAAI,EAAE,EAAE,IAAI,EAAE,UATG,MAAM,CASF,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;CACnE,EAAE;AACD,QAAM,EAAE,OAVD,kBAAkB,GAUG;CAC7B,CAAC,CAAC;;AAEH,aAAa,CAAC,MAAM,CAAC,eAAe,EAAE,YAAM;AAC1C,SAAO,CAAC,MAAM,CAAC,CAAC;CACjB,CAAC,CAAC;;AAEH,aAAa,CAAC,OAAO,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,IAAI,EAAE;AACrE,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,KAnB2B,WAAW,CAmB1B,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,UAAC,GAAG,EAAE,YAAY,EAAK;AAC/D,QAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,QAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;GAC1B,CAAC,CAAC;CACJ,CAAC;;AAEF,aAAa,CAAC,OAAO,CAAC,UAAU,GAAG,SAAS,UAAU,CAAC,IAAI,EAAE;AAC3D,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,SAAO,CAAC,eAAe,CAAC,UAAC,GAAG,EAAE,YAAY,EAAK;AAC7C,QAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,QAAI,CAAC,IAAI,EAAE,iBAAE,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;GAC3C,CAAC,CAAC;CACJ,CAAC;;AAEF,IAAM,OAAO,GAAG,mBAAS,KAAK,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;;AAEzD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAE,IAAI,EAAK;;AAE/C,SAAO,CAAC,eAAe,CAAC,UAAC,GAAG,EAAE,YAAY,EAAK;AAC7C,QAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,oBAAM,IAAI,CAAC,YAAY,EAAE,UAAC,WAAW,EAAE,IAAI,EAAK;AAC9C,iBAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC1B,EAAE,IAAI,CAAC,CAAC;GACV,CAAC,CAAC;CACJ,CAAC,CAAC;;kBAEY,OAAO","file":"account.js","sourcesContent":["import _ from 'lodash';\nimport async from 'async';\nimport mongoose, { Schema, Types } from 'mongoose';\nimport { defaultJSONOptions, Transaction } from './';\n\nconst accountSchema = new Schema({\n  name: { type: String, required: true },\n  group: { type: String, required: true },\n  type: { type: String, enum: ['savings', 'checking', 'credit_card', 'loan', 'investment'], required: true },\n  budget: { type: Boolean, required: true },\n  notes: String,\n  user: { type: Schema.Types.ObjectId, ref: 'User', required: true }\n}, {\n  toJSON: defaultJSONOptions()\n});\n\naccountSchema.static('readonlyProps', () => {\n  return ['user'];\n});\n\naccountSchema.methods.getTransactions = function getTransactions(done) {\n  const account = this;\n  Transaction.find({ account: account.id }, (err, transactions) => {\n    if (err) return done(err);\n    done(null, transactions);\n  });\n};\n\naccountSchema.methods.getBalance = function getBalance(done) {\n  const account = this;\n  account.getTransactions((err, transactions) => {\n    if (err) return done(err);\n    done(null, _.sum(transactions, 'amount'));\n  });\n};\n\nconst Account = mongoose.model('Account', accountSchema);\n\nAccount.schema.post('remove', (account, next) => {\n  // Remove all transactions that are apart of this account\n  account.getTransactions((err, transactions) => {\n    if (err) return next(err);\n    async.each(transactions, (transaction, done) => {\n      transaction.remove(done);\n    }, next);\n  });\n});\n\nexport default Account;\n"]}