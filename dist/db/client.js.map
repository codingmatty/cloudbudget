{"version":3,"sources":["../../src/db/client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAM,YAAY,GAAG,cAHF,MAAM,CAGO;AAC9B,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;AACpD,UAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;AACxD,cAAY,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;AAC5D,aAAW,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC;AAC3D,aAAW,EAAE,EAAE,IAAI,EAAE,MAAM;AACzB,YAAQ,EAAE;AACR,eAAS,EAAE,mBAAC,KAAK,EAAK;AAAC,eAAO,gBAAG,GAAG,CAAC,KAAK,CAAC,CAAC;OAAC;AAC7C,aAAO,EAAE,qCAAqC;KAC/C;GACF;CACF,EAAE;AACD,QAAM,EAAE,MAdD,kBAAkB,GAcG;CAC7B,CAAC,CAAC;;AAEH,YAAY,CAAC,OAAO,CAAC,mBAAmB,GAAG,YAAM;AAC/C,MAAM,MAAM,GAAG,oBAAU,QAAQ,CAAC,EAAE,CAAC,CAAC;AACtC,SAAO;AACL,YAAQ,EAAE,oBAAU,QAAQ,CAAC,EAAE,CAAC;AAChC,UAAM,EAAN,MAAM;AACN,gBAAY,EAAE,iBAAO,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;GACzC,CAAC;CACH,CAAC;;AAEF,YAAY,CAAC,OAAO,CAAC,YAAY,GAAG,SAAS,kBAAkB,CAAC,MAAM,EAAE;AACtE,SAAO,iBAAO,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;CACtD,CAAC;;AAEF,IAAM,MAAM,GAAG,mBAAS,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;;kBAEvC,MAAM","file":"client.js","sourcesContent":["import is from 'is_js';\nimport bcrypt from 'bcrypt';\nimport randomKey from 'random-key';\nimport mongoose, { Schema } from 'mongoose';\nimport { defaultJSONOptions } from './';\n\nconst clientSchema = new Schema({\n  name: { type: String, required: true, unique: true },\n  clientId: { type: String, required: true, unique: true },\n  clientSecret: { type: String, required: true, unique: true },\n  permissions: [{ type: String, enum: ['password', 'code'] }],\n  redirectUrl: { type: String,\n    validate: {\n      validator: (value) => {return is.url(value);},\n      message: '{VALUE} is not a valid url address.'\n    }\n  }\n}, {\n  toJSON: defaultJSONOptions()\n});\n\nclientSchema.statics.generateCredentials = () => {\n  const secret = randomKey.generate(32);\n  return {\n    clientId: randomKey.generate(32),\n    secret,\n    clientSecret: bcrypt.hashSync(secret, 8)\n  };\n};\n\nclientSchema.methods.verifySecret = function verifyClientSecret(secret) {\n  return bcrypt.compareSync(secret, this.clientSecret);\n};\n\nconst Client = mongoose.model('Client', clientSchema);\n\nexport default Client;\n"]}