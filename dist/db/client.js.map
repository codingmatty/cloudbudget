{"version":3,"sources":["../../src/db/client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAM,eAAe,qBAAW;AAC9B,QAAM,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,QAAQ,IAAR,EAAc,WAAW,CAAX,EAApD;AACA,YAAU,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,QAAQ,IAAR,EAAc,WAAW,EAAX,EAAe,WAAW,EAAX,EAAvE;AACA,gBAAc,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,QAAQ,IAAR,EAAc,WAAW,CAAX,EAA5D;AACA,eAAa,CAAC,EAAE,MAAM,MAAN,EAAc,MAAM,CAAC,UAAD,EAAa,MAAb,CAAN,EAAjB,CAAb;AACA,eAAa,EAAE,MAAM,MAAN;AACb,cAAU;AACR,iBAAW,mBAAC,KAAD,EAAW;AAAC,eAAO,gBAAG,GAAH,CAAO,KAAP,CAAP,CAAD;OAAX;AACX,eAAS,qCAAT;KAFF;GADF;CALmB,EAWlB;AACD,UAAQ,2BAAR;CAZmB,CAAf;;AAeN,aAAa,OAAb,CAAqB,mBAArB,GAA2C,YAAM;AAC/C,MAAM,SAAS,oBAAU,QAAV,CAAmB,EAAnB,CAAT,CADyC;AAE/C,SAAO;AACL,cAAU,oBAAU,QAAV,CAAmB,EAAnB,CAAV;AACA,kBAFK;AAGL,kBAAc,iBAAO,QAAP,CAAgB,MAAhB,EAAwB,CAAxB,CAAd;GAHF,CAF+C;CAAN;;AAS3C,aAAa,OAAb,CAAqB,YAArB,GAAoC,SAAS,kBAAT,CAA4B,MAA5B,EAAoC;AACtE,SAAO,iBAAO,WAAP,CAAmB,MAAnB,EAA2B,KAAK,YAAL,CAAlC,CADsE;CAApC;;AAIpC,IAAM,SAAS,mBAAS,KAAT,CAAe,QAAf,EAAyB,YAAzB,CAAT;;kBAES","file":"client.js","sourcesContent":["import is from 'is_js';\nimport bcrypt from 'bcrypt';\nimport randomKey from 'random-key';\nimport mongoose, { Schema } from 'mongoose';\nimport { defaultJSONOptions } from './';\n\nconst clientSchema = new Schema({\n  name: { type: String, required: true, unique: true, minlength: 1 },\n  clientId: { type: String, required: true, unique: true, minlength: 32, maxlength: 32 },\n  clientSecret: { type: String, required: true, unique: true, minlength: 1 },\n  permissions: [{ type: String, enum: ['password', 'code'] }],\n  redirectUrl: { type: String,\n    validate: {\n      validator: (value) => {return is.url(value);},\n      message: '{VALUE} is not a valid url address.'\n    }\n  }\n}, {\n  toJSON: defaultJSONOptions()\n});\n\nclientSchema.statics.generateCredentials = () => {\n  const secret = randomKey.generate(32);\n  return {\n    clientId: randomKey.generate(32),\n    secret,\n    clientSecret: bcrypt.hashSync(secret, 8)\n  };\n};\n\nclientSchema.methods.verifySecret = function verifyClientSecret(secret) {\n  return bcrypt.compareSync(secret, this.clientSecret);\n};\n\nconst Client = mongoose.model('Client', clientSchema);\n\nexport default Client;\n"]}