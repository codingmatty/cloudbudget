{"version":3,"sources":["../../src/db/transaction.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAGA,IAAM,oBAAoB,qBAAW;AACnC,QAAM,EAAE,MAAM,IAAN,EAAY,SAAS,KAAK,GAAL,EAA7B;AACA,SAAO,EAAE,MAAM,MAAN,EAAc,MAAM,CAAC,MAAD,EAAS,SAAT,EAAoB,YAApB,CAAN,EAAyC,UAAU,IAAV,EAAhE;AACA,SAAO,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAgB,WAAW,CAAX,EAAvC;AACA,UAAQ,EAAE,MAAM,MAAN,EAAc,UAAU,IAAV,EAAxB;AACA,QAAM,EAAE,MAAM,MAAN,EAAc,SAAS,EAAT,EAAtB;AACA,QAAM,CAAC,EAAE,MAAM,MAAN,EAAH,CAAN;AACA,QAAM,EAAE,MAAM,iBAAO,KAAP,CAAa,QAAb,EAAuB,KAAK,MAAL,EAAa,UAAU,IAAV,EAAlD;AACA,WAAS,EAAE,MAAM,iBAAO,KAAP,CAAa,QAAb,EAAuB,KAAK,SAAL,EAAgB,UAAU,IAAV,EAAxD;CARwB,EASvB;AACD,UAAQ,0BAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AACvC,QAAI,OAAJ,GAAc,IAAI,OAAJ,YAAuB,gBAAM,QAAN,GAAiB,IAAI,OAAJ,CAAY,QAAZ,EAAxC,GAAiE,IAAI,OAAJ,CADxC;AAEvC,QAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,QAAT,EAAX,CAFuC;GAAd,CAA3B;CAVwB,CAApB;;AAgBN,kBAAkB,MAAlB,CAAyB,eAAzB,EAA0C,YAAM;AAC9C,SAAO,CAAC,MAAD,CAAP,CAD8C;CAAN,CAA1C;;AAIA,kBAAkB,IAAlB,CAAuB,SAAvB,EAAkC,QAAlC,CAA2C,SAAS,eAAT,CAAyB,KAAzB,EAAgC,IAAhC,EAAsC;AAC/E,MAAM,cAAc,IAAd,CADyE;AAE/E,YAAQ,OAAR,CAAgB,EAAE,KAAK,KAAL,EAAY,MAAM,YAAY,IAAZ,EAApC,EAAwD,UAAC,GAAD,EAAM,OAAN,EAAkB;AACxE,QAAI,CAAC,OAAD,EAAU;AACZ,aAAO,KAAK,KAAL,EAAY,yBAAZ,CAAP,CADY;KAAd;AAGA,WAAO,KAAK,IAAL,CAAP,CAJwE;GAAlB,CAAxD,CAF+E;CAAtC,CAA3C;;AAUA,IAAM,cAAc,mBAAS,KAAT,CAAe,aAAf,EAA8B,iBAA9B,CAAd;kBACS","file":"transaction.js","sourcesContent":["import mongoose, { Schema, Types } from 'mongoose';\nimport { defaultJSONOptions, Account } from './';\n\nconst transactionSchema = new Schema({\n  date: { type: Date, default: Date.now },\n  state: { type: String, enum: ['none', 'cleared', 'reconciled'], required: true },\n  payee: { type: String, required: true, minlength: 1 },\n  amount: { type: Number, required: true },\n  memo: { type: String, default: '' },\n  tags: [{ type: String }],\n  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  account: { type: Schema.Types.ObjectId, ref: 'Account', required: true }\n}, {\n  toJSON: defaultJSONOptions((doc, ret) => {\n    ret.account = ret.account instanceof Types.ObjectId ? ret.account.toString() : ret.account;\n    ret.date = ret.date.toString();\n  })\n});\n\ntransactionSchema.static('readonlyProps', () => {\n  return ['user'];\n});\n\ntransactionSchema.path('account').validate(function validateAccount(value, next) {\n  const transaction = this;\n  Account.findOne({ _id: value, user: transaction.user }, (err, account) => {\n    if (!account) {\n      return next(false, 'Account does not exist.');\n    }\n    return next(true);\n  });\n});\n\nconst Transaction = mongoose.model('Transaction', transactionSchema);\nexport default Transaction;\n"]}