{"version":3,"sources":["../../src/db/transaction.js"],"names":[],"mappings":"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","file":"transaction.js","sourcesContent":["import mongoose, { Schema, Types } from 'mongoose';\nimport { defaultJSONOptions, Account } from './';\n\nconst transactionSchema = new Schema({\n  date: { type: Date, default: Date.now },\n  state: { type: String, enum: ['none', 'cleared', 'reconciled'], required: true },\n  payee: { type: String, required: true },\n  amount: { type: Number, required: true },\n  memo: { type: String, default: '' },\n  tags: [{ type: String }],\n  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  account: { type: Schema.Types.ObjectId, ref: 'Account', required: true }\n}, {\n  toJSON: defaultJSONOptions((doc, ret) => {\n    ret.account = ret.account instanceof Types.ObjectId ? ret.account.toString() : ret.account;\n    ret.date = ret.date.toString();\n  })\n});\n\ntransactionSchema.static('readonlyProps', () => {\n  return ['user', 'account'];\n});\n\ntransactionSchema.pre('save', function addTransactionIdToAccount(next) {\n  const transaction = this;\n  Account.findById(transaction.account, (err, account) => {\n    if (err) return next(err);\n    account.transactions.push(transaction.id);\n    account.save(next);\n  });\n});\n\ntransactionSchema.post('remove', (transaction, next) => {\n  Account.findById(transaction.account, (err, account) => {\n    if (!account) return next();\n    const index = account.transactions.indexOf(transaction.id);\n    account.transactions.splice(index, 1);\n    account.save(next);\n  });\n});\n\ntransactionSchema.path('account').validate(function validateTransactionAccount(value, next) {\n  const transaction = this;\n  Account.findOne({ _id: value, user: transaction.user }, (err, account) => {\n    if (!account) {\n      return next(false, 'Account does not exist.');\n    }\n    return next(true);\n  });\n});\n\nconst Transaction = mongoose.model('Transaction', transactionSchema);\nexport default Transaction;\n"]}