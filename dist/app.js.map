{"version":3,"sources":["../src/app.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAM,GAAG,GAAG,wBAAS;;;;;;AAAC,AAMtB,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,EAAE;AACpC,KAAG,CAAC,GAAG,CAAC,sBAAO,KAAK,CAAC,CAAC,CAAC;CACxB;;;AAAA,AAGD,GAAG,CAAC,GAAG,CAAC,6BAAc,CAAC,CAAC;AACxB,GAAG,CAAC,GAAG,CAAC,qBAAW,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,qBAAW,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;;AAEpD,GAAG,CAAC,GAAG,CAAC,mBAAS,UAAU,EAAE,CAAC,CAAC;AAC/B,GAAG,CAAC,GAAG,CAAC,mBAAS,OAAO,EAAE,CAAC,CAAC;AAC5B,qBAAe,CAAC;;AAEhB,GAAG,CAAC,GAAG,CAAC,SAAS,gBAAM;;;AAAC,AAGxB,GAAG,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAK;AAC1B,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AACnC,KAAG,CAAC,MAAM,GAAG,GAAG,CAAC;AACjB,MAAI,CAAC,GAAG,CAAC,CAAC;CACX,CAAC;;;;AAAC,AAIH,GAAG,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAK;AACzB,KAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;AAC9B,KAAG,CAAC,MAAM,CAAC,OAAO,EAAE;AAClB,WAAO,EAAE,GAAG,CAAC,OAAO;AACpB,SAAK,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,aAAa,GAAG,GAAG,GAAG,EAAE;GACnD,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AACtC,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,YAAY,EAAE;;AACnC,QAAM,OAAO,GAAG;AACd,SAAG,EAAE,aAAG,YAAY,CAAC,yBAAyB,CAAC;AAC/C,UAAI,EAAE,aAAG,YAAY,CAAC,gBAAgB,CAAC;KACxC,CAAC;AACF,QAAM,MAAM,GAAG,gBAAM,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAChD,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,YAAM;AACxB,UAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO;;AAAC,AAEtC,aAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3D,CAAC,CAAC;;CACJ,MAAM;;AACL,QAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,YAAM;AACpC,UAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO;;AAAC,AAEtC,aAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KAC3D,CAAC,CAAC;;CACJ;;kBAEc,GAAG","file":"app.js","sourcesContent":["import fs from 'fs';\n// import path from 'path';\nimport https from 'https';\nimport logger from 'morgan';\nimport express from 'express';\nimport passport from 'passport';\n// import favicon from 'serve-favicon';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport api from './api';\nimport setupPassport from './auth/auth';\n\nconst app = express();\n\n// view engine setup\n// app.set('views', path.join(__dirname, 'views'));\n// app.set('view engine', 'jade');\n\nif (app.get('env') === 'development') {\n  app.use(logger('dev'));\n}\n// app.use(favicon(__dirname + '/public/favicon.ico'));\n// app.use(express.static('public'));\napp.use(cookieParser());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.use(passport.initialize());\napp.use(passport.session());\nsetupPassport();\n\napp.use('/api/v1', api);\n\n// catch 404 and forwarding to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n// no stacktraces leaked to user if in production mode\napp.use((err, req, res) => {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: app.get('env') === 'development' ? err : {}\n  });\n});\n\nconst port = process.env.PORT || 8090;\nif (app.get('env') === 'production') {\n  const options = {\n    key: fs.readFileSync('private.cloudbudget.pem'),\n    cert: fs.readFileSync('0001_chain.pem')\n  };\n  const server = https.createServer(options, app);\n  server.listen(port, () => {\n    const host = server.address().address;\n    /* eslint-disable no-console */\n    console.log('Example app listening at %s:%s', host, port);\n  });\n} else {\n  const server = app.listen(port, () => {\n    const host = server.address().address;\n    /* eslint-disable no-console */\n    console.log('Example app listening at %s:%s', host, port);\n  });\n}\n\nexport default app;\n"]}