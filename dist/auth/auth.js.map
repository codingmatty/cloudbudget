{"version":3,"sources":["../../src/auth/auth.js"],"names":[],"mappings":"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","file":"auth.js","sourcesContent":["import fs from 'fs';\nimport moment from 'moment';\nimport passport from 'passport';\nimport { BasicStrategy } from 'passport-http';\nimport { Strategy as JwtStrategy } from 'passport-jwt';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport { Strategy as BearerStrategy } from 'passport-http-bearer';\nimport { Strategy as ClientPasswordStrategy } from 'passport-oauth2-client-password';\nimport { User, Client, AccessToken } from '../db';\n\nexport default function () {\n  passport.use(new LocalStrategy({ session: false }, (username, password, done) => {\n    User.findOne({ username }, (err, user) => {\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (!user.verifyPassword(password)) { return done(null, false); }\n      const token = user.generateJwt();\n      user.save((saveErr) => { // Save nonce generated for JWT\n        if (saveErr) { return done(saveErr); }\n        user.token = token;\n        done(null, user);\n      });\n    });\n  }));\n\n  const key = fs.readFileSync(__dirname + '//../../public.pem').toString();\n  passport.use(new JwtStrategy({\n    secretOrKey: key,\n    issuer: 'admin@cloudbudget.io',\n    audience: 'cloudbudget.io',\n    algorithms: ['RS256'],\n    tokenBodyField: 'token',\n    tokenQueryParameterName: 'token'\n  }, (jwtPayload, done) => {\n    User.findOne({ _id: jwtPayload.id }, (err, user) => {\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (!user.verifyNonce(jwtPayload.jti)) { return done(null, false); }\n      return done(null, user);\n    });\n  }));\n\n\n  /**\n   * BasicStrategy & ClientPasswordStrategy\n   *\n   * These strategies are used to authenticate registered OAuth clients.  They are\n   * employed to protect the `token` endpoint, which consumers use to obtain\n   * access tokens.  The OAuth 2.0 specification suggests that clients use the\n   * HTTP Basic scheme to authenticate.  Use of the client password strategy\n   * allows clients to send the same credentials in the request body (as opposed\n   * to the `Authorization` header).  While this approach is not recommended by\n   * the specification, in practice it is quite common.\n   */\n  function verifyClientCredentials(clientId, clientSecret, done) {\n    Client.findOne({ clientId }, (err, client) => {\n      if (err) { return done(err); }\n      if (!client) { return done(null, false); }\n      if (!client.verifySecret(clientSecret)) { return done(null, false); }\n      return done(null, client);\n    });\n  }\n  passport.use(new BasicStrategy(verifyClientCredentials));\n  passport.use(new ClientPasswordStrategy(verifyClientCredentials));\n\n  /**\n   * BearerStrategy\n   *\n   * This strategy is used to authenticate users based on an access token (aka a\n   * bearer token).  The user must have previously authorized a client\n   * application, which is issued an access token to make requests on behalf of\n   * the authorizing user.\n   */\n  passport.use(new BearerStrategy((token, done) => {\n    AccessToken.findOne({ token }, (tokenFindErr, accessToken) => {\n      if (tokenFindErr) { return done(tokenFindErr); }\n      if (!accessToken) { return done(null, false); }\n      if (moment(accessToken.date).add(2, 'weeks') < moment()) { return done(null, false); }\n      User.findById(accessToken.userId, (userFindErr, user) => {\n        if (userFindErr) { return done(userFindErr); }\n        if (!user) { return done(null, false); }\n        user.token = accessToken.token;\n        // to keep this example simple, restricted scopes are not implemented,\n        // and this is just for illustrative purposes\n        const info = { scope: '*' };\n        done(null, user, info);\n      });\n    });\n  }));\n}\n"]}