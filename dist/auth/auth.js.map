{"version":3,"sources":["../../src/auth/auth.js"],"names":[],"mappings":"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","file":"auth.js","sourcesContent":["import fs from 'fs';\nimport moment from 'moment';\nimport passport from 'passport';\nimport { BasicStrategy } from 'passport-http';\nimport { Strategy as JwtStrategy } from 'passport-jwt';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport { Strategy as BearerStrategy } from 'passport-http-bearer';\nimport { Strategy as ClientPasswordStrategy } from 'passport-oauth2-client-password';\nimport { User, Client, AccessToken } from '../db';\n\nexport default function () {\n  passport.use(new LocalStrategy({ session: false }, (username, password, done) => {\n    User.findOne({ username }, (err, user) => {\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (!user.verifyPassword(password)) { return done(null, false); }\n      const token = user.generateJwt();\n      user.save((saveErr) => { // Save nonce generated for JWT\n        if (saveErr) { return done(saveErr); }\n        user.token = token;\n        done(null, user);\n      });\n    });\n  }));\n\n  const key = fs.readFileSync(__dirname + '//../../public.pem').toString();\n  passport.use(new JwtStrategy({\n    secretOrKey: key,\n    issuer: 'admin@cloudbudget.io',\n    audience: 'cloudbudget.io',\n    algorithms: ['RS256'],\n    tokenBodyField: 'token',\n    tokenQueryParameterName: 'token'\n  }, (jwtPayload, done) => {\n    User.findOne({ _id: jwtPayload.id }, (err, user) => {\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (!user.verifyNonce(jwtPayload.jti)) { return done(null, false); }\n      return done(null, user);\n    });\n  }));\n\n\n  /**\n   * BasicStrategy & ClientPasswordStrategy\n   *\n   * These strategies are used to authenticate registered OAuth clients.  They are\n   * employed to protect the `token` endpoint, which consumers use to obtain\n   * access tokens.  The OAuth 2.0 specification suggests that clients use the\n   * HTTP Basic scheme to authenticate.  Use of the client password strategy\n   * allows clients to send the same credentials in the request body (as opposed\n   * to the `Authorization` header).  While this approach is not recommended by\n   * the specification, in practice it is quite common.\n   */\n  function verifyClientCredentials(clientId, clientSecret, done) {\n    Client.findOne({ clientId }, (err, client) => {\n      if (err) { return done(err); }\n      if (!client) { return done(null, false); }\n      if (!client.verifySecret(clientSecret)) { return done(null, false); }\n      return done(null, client);\n    });\n  }\n  passport.use(new BasicStrategy(verifyClientCredentials));\n  passport.use(new ClientPasswordStrategy(verifyClientCredentials));\n\n  /**\n   * BearerStrategy\n   *\n   * This strategy is used to authenticate users based on an access token (aka a\n   * bearer token).  The user must have previously authorized a client\n   * application, which is issued an access token to make requests on behalf of\n   * the authorizing user.\n   */\n  passport.use(new BearerStrategy((token, done) => {\n    AccessToken.findOne({ token }, (tokenFindErr, accessToken) => {\n      if (tokenFindErr) { return done(tokenFindErr); }\n      if (!accessToken) { return done(null, false); }\n      if (moment(accessToken.date).add(2, 'weeks') < moment()) { return done(null, false); }\n      User.findById(accessToken.userId, (userFindErr, user) => {\n        if (userFindErr) { return done(userFindErr); }\n        if (!user) { return done(null, false); }\n        user.token = accessToken.token;\n        // to keep this example simple, restricted scopes are not implemented,\n        // and this is just for illustrative purposes\n        const info = { scope: '*' };\n        done(null, user, info);\n      });\n    });\n  }));\n}\n"]}