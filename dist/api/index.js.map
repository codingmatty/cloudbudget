{"version":3,"sources":["../../src/api/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import inflection from 'inflection';\nimport { Router } from 'express';\nimport users from './users';\nimport oauth2 from './oauth2';\nimport accounts from './accounts';\nimport transactions from './transactions';\n\nconst api = new Router();\n\n// perhaps expose some API metadata at the root\napi.get('/', (req, res) => {\n  res.status(200).send({\n    version: '0.0.2'\n  });\n});\n\napi.use('/users', users);\napi.use('/oauth2', oauth2);\napi.use('/accounts', accounts);\napi.use('/transactions', transactions);\n\nexport function handleError(err, res, method, model) {\n  let errorObj = err;\n  if (err) {\n    if (err.errors) {\n      errorObj = {};\n      for (const singleErrKey in err.errors) {\n        if (err.errors.hasOwnProperty(singleErrKey)) {\n          errorObj[singleErrKey] = err.errors[singleErrKey].message;\n        }\n      }\n    } else if (err.code === 11000) {\n      const errmsgRegex = /index: (\\S+\\$)?([\\w\\d]+)_.* dup key: { : \\\\?\\\"(\\S+)\\\\?\\\" }$/;\n      if (errmsgRegex.test(err.errmsg)) {\n        const [, , field, value] = errmsgRegex.exec(err.errmsg);\n        errorObj = {\n          [field]: `${field} '${value}' already exists.`\n        };\n      }\n    }\n  }\n  res.status(400).send({\n    message: `Error! Unable to ${method} ${method === 'list' ? inflection.pluralize(model) : model}.`,\n    error: errorObj\n  });\n}\n\nexport function getInclusions(req) {\n  return Array.isArray(req.query.include) ? req.query.include.join(' ') : req.query.include || '';\n}\n\nexport function buildQuery(Model, req) {\n  const query = {};\n  Model.schema.eachPath((path) => {\n    if (req.query[path]) {\n      if (Array.isArray(req.query[path])) {\n        query[path] = { $in: req.query[path] };\n      } else if (/([\\w\\d]*,)+[\\w\\d]*/.test(req.query[path])) {\n        query[path] = { $in: req.query[path].split(',') };\n      } else {\n        query[path] = req.query[path];\n      }\n    }\n  });\n  if (req.query.id) {\n    if (Array.isArray(req.query.id)) {\n      query._id = { $in: req.query.id };\n    } else if (/([\\w\\d]*,)+[\\w\\d]*/.test(req.query.id)) {\n      query._id = { $in: req.query.id.split(',') };\n    } else {\n      query._id = req.query.id;\n    }\n  }\n  return query;\n}\n\nexport default api;\n"]}