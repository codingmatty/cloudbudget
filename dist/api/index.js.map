{"version":3,"sources":["../../src/api/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import inflection from 'inflection';\nimport { Router } from 'express';\nimport users from './users';\nimport oauth2 from './oauth2';\nimport accounts from './accounts';\nimport transactions from './transactions';\n\nconst api = new Router();\n\n// perhaps expose some API metadata at the root\napi.get('/', (req, res) => {\n  res.status(200).send({\n    version: '0.0.2'\n  });\n});\n\napi.use('/users', users);\napi.use('/oauth2', oauth2);\napi.use('/accounts', accounts);\napi.use('/transactions', transactions);\n\napi.use((req, res) => {\n  res.status(404).send();\n});\n\nexport function handleError(err, res, method, model) {\n  let errorObj = err;\n  if (err) {\n    if (err.errors) {\n      errorObj = {};\n      for (const singleErrKey in err.errors) {\n        if (err.errors.hasOwnProperty(singleErrKey)) {\n          errorObj[singleErrKey] = err.errors[singleErrKey].message;\n        }\n      }\n    } else if (err.code === 11000) {\n      const errmsgRegex = /index: (\\S+\\$)?([\\w\\d]+)_.* dup key: { : \\\\?\\\"(\\S+)\\\\?\\\" }$/;\n      if (errmsgRegex.test(err.errmsg)) {\n        const [, , field, value] = errmsgRegex.exec(err.errmsg);\n        errorObj = {\n          [field]: `${field} '${value}' already exists.`\n        };\n      }\n    }\n  }\n  res.status(400).send({\n    message: `Error! Unable to ${method} ${method === 'list' ? inflection.pluralize(model) : model}.`,\n    errors: errorObj\n  });\n}\n\nexport function getInclusions(req) {\n  return Array.isArray(req.query.include) ? req.query.include.join(' ') : req.query.include || '';\n}\n\nexport function buildQuery(Model, req) {\n  const query = {};\n  Model.schema.eachPath((path) => {\n    if (req.query[path]) {\n      if (Array.isArray(req.query[path])) {\n        query[path] = { $in: req.query[path] };\n      } else if (/([\\w\\d]*,)+[\\w\\d]*/.test(req.query[path])) {\n        query[path] = { $in: req.query[path].split(',') };\n      } else {\n        query[path] = req.query[path];\n      }\n    }\n  });\n  if (req.query.id) {\n    if (Array.isArray(req.query.id)) {\n      query._id = { $in: req.query.id };\n    } else if (/([\\w\\d]*,)+[\\w\\d]*/.test(req.query.id)) {\n      query._id = { $in: req.query.id.split(',') };\n    } else {\n      query._id = req.query.id;\n    }\n  }\n  return query;\n}\n\nexport default api;\n"]}