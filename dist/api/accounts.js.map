{"version":3,"sources":["../../src/api/accounts.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,GAAG,GAAG,aALH,MAAM,EAKS,CAAC;AACzB,GAAG,CAAC,GAAG,CAAC,mBAAS,YAAY,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;;;AAAC,AAGtE,cARmB,UAAU,EAQlB,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAK;AACvD,kBAAM,GAAG,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAE,QAAQ,EAAK;AACzC,WAAO,CAAC,UAAU,CAAC,UAAC,GAAG,EAAE,OAAO,EAAK;AACnC,UAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAC3C,uBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;AACpC,cAAQ,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;KACnC,CAAC,CAAC;GACJ,EAAE,UAAC,GAAG,EAAE,kBAAkB,EAAK;AAC9B,OAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;GACpD,CAAC,CAAC;CACJ,CAAC;;;AAAC,AAGH,cArB+B,UAAU,EAqB9B,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAK;AACtD,SAAO,CAAC,UAAU,CAAC,UAAC,GAAG,EAAE,OAAO,EAAK;AACnC,QAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAC3C,qBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;AACpC,OAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;GACnD,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACzB,MAAM,KAAK,GAAG,WA7BP,UAAU,MACV,OAAO,EA4BoB,GAAG,CAAC,CAAC;AACvC,OAAK,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;AACzB,MA9BO,OAAO,CA8BN,MAAM,CAAC,KAAK,EAAE,iBAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IA9BhC,OAAO,CA8BiC,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,UAAC,SAAS,EAAK;AACrG,QAAI,SAAS,EAAE;AAAE,aAAO,WAhCP,WAAW,EAgCQ,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;KAAE;AAC5E,QAhCK,OAAO,CAgCJ,IAAI,CAAC,KAAK,EAAE,UAAC,OAAO,EAAE,QAAQ,EAAK;AACzC,UAAI,OAAO,EAAE;AAAE,eAAO,WAlCP,WAAW,EAkCQ,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;OAAE;AACxE,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;AACnB,eAAO,8BAA8B;AACrC,YAAI,EAAE,QAAQ;OACf,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,wBAAS,SAAS,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;;kBAEzD,GAAG","file":"accounts.js","sourcesContent":["import _ from 'lodash';\nimport async from 'async';\nimport passport from 'passport';\nimport { Router } from 'express';\nimport resource, { listMethod, showMethod } from './resource';\nimport { buildQuery, handleError } from './index';\nimport { Account } from '../db';\n\nconst api = new Router();\napi.use(passport.authenticate(['jwt', 'bearer'], { session: false }));\n\n// GET - List\nlistMethod(api, 'Account', true, (req, res, accounts) => {\n  async.map(accounts, (account, callback) => {\n    account.getBalance((err, balance) => {\n      const normalizedAccount = account.toJSON();\n      normalizedAccount.balance = balance;\n      callback(null, normalizedAccount);\n    });\n  }, (err, normalizedAccounts) => {\n    res.status(200).send({ data: normalizedAccounts });\n  });\n});\n\n// GET - Show\nshowMethod(api, 'Account', true, (req, res, account) => {\n  account.getBalance((err, balance) => {\n    const normalizedAccount = account.toJSON();\n    normalizedAccount.balance = balance;\n    res.status(200).send({ data: normalizedAccount });\n  });\n});\n\napi.put('/', (req, res) => {\n  const query = buildQuery(Account, req);\n  query.user = req.user.id;\n  Account.update(query, _.omit(req.body, Account.readonlyProps() || []), { multi: true }, (updateErr) => {\n    if (updateErr) { return handleError(updateErr, res, 'update', 'Accounts'); }\n    Account.find(query, (findErr, accounts) => {\n      if (findErr) { return handleError(findErr, res, 'update', 'Accounts'); }\n      res.status(200).send({\n        message: `Success! Accounts updated.`,\n        data: accounts\n      });\n    });\n  });\n});\n\napi.use('/', resource('Account', true, ['create', 'update', 'delete']));\n\nexport default api;\n"]}