{"version":3,"sources":["../../src/api/oauth2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,IAAM,GAAG,GAAG,aAJH,MAAM,EAIS;;;;;;;;;;;;;;;;;;AAAC,AAkBzB,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,mBAAS,YAAY,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,gBAAO,aAAa,CAAC,UAAC,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAK;AAChI,MArBO,MAAM,CAqBN,QAAQ,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,MAAM,EAAK;AACzC,QAAI,GAAG,EAAE;AAAE,aAAO,IAAI,CAAC,GAAG,CAAC,CAAC;KAAE;AAC9B,QAAI,MAAM,CAAC,WAAW,KAAK,WAAW,EAAE;AAAE,aAAO,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;KAAE;AAC7E,WAAO,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;GACxC,CAAC,CAAC;CACJ,CAAC,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAChB,KAAG,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,GAAG,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;CAClG,CAAC;;;;;;;;;AAAC,AASH,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAS,YAAY,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,gBAAO,QAAQ,EAAE,CAAC;;;;;;;;;AAAC,AAU3F,GAAG,CAAC,IAAI,CAAC,QAAQ,EACf,mBAAS,YAAY,CAAC,CAAC,OAAO,EAAE,wBAAwB,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAC9E,gBAAO,KAAK,EAAE,EACd,gBAAO,YAAY,EAAE,CAAC,CAAC;;kBAEV,GAAG","file":"oauth2.js","sourcesContent":["import passport from 'passport';\nimport { Router } from 'express';\nimport server from '../auth/oauth2';\nimport { Client } from '../db';\n\nconst api = new Router();\n\n// user authorization endpoint\n//\n// `authorization` middleware accepts a `validate` callback which is\n// responsible for validating the client making the authorization request.  In\n// doing so, is recommended that the `redirectURI` be checked against a\n// registered value, although security requirements may vary accross\n// implementations.  Once validated, the `done` callback must be invoked with\n// a `client` instance, as well as the `redirectURI` to which the user will be\n// redirected after an authorization decision is obtained.\n//\n// This middleware simply initializes a new authorization transaction.  It is\n// the application's responsibility to authenticate the user and render a dialog\n// to obtain their approval (displaying details about the client requesting\n// authorization).  We accomplish that here by routing through `ensureLoggedIn()`\n// first, and rendering the `dialog` view.\n\napi.get('/authorization', passport.authenticate('jwt', { session: false }), server.authorization((clientId, redirectURI, done) => {\n  Client.findById(clientId, (err, client) => {\n    if (err) { return done(err); }\n    if (client.redirectUrl !== redirectURI) { return done(null, client, false); }\n    return done(null, client, redirectURI);\n  });\n}), (req, res) => {\n  res.json({ transactionId: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });\n});\n\n// user decision endpoint\n//\n// `decision` middleware processes a user's decision to allow or deny access\n// requested by a client application.  Based on the grant type requested by the\n// client, the above grant middleware configured above will be invoked to send\n// a response.\n\napi.post('/decision', passport.authenticate('jwt', { session: false }), server.decision());\n\n\n// token endpoint\n//\n// `token` middleware handles client requests to exchange authorization grants\n// for access tokens.  Based on the grant type being exchanged, the above\n// exchange middleware will be invoked to handle the request.  Clients must\n// authenticate when making requests to this endpoint.\n\napi.post('/token',\n  passport.authenticate(['basic', 'oauth2-client-password'], { session: false }),\n  server.token(),\n  server.errorHandler());\n\nexport default api;\n"]}