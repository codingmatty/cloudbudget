{"version":3,"sources":["../../src/api/oauth2.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,IAAM,MAAM,qBAAN;;;;;;;;;;;;;;;;;;AAkBN,IAAI,GAAJ,CAAQ,gBAAR,EAA0B,mBAAS,YAAT,CAAsB,KAAtB,EAA6B,EAAE,SAAS,KAAT,EAA/B,CAA1B,EAA4E,gBAAO,aAAP,CAAqB,UAAC,QAAD,EAAW,WAAX,EAAwB,IAAxB,EAAiC;AAChI,aAAO,QAAP,CAAgB,QAAhB,EAA0B,UAAC,GAAD,EAAM,MAAN,EAAiB;AACzC,QAAI,GAAJ,EAAS;AAAE,aAAO,KAAK,GAAL,CAAP,CAAF;KAAT;AACA,QAAI,OAAO,WAAP,KAAuB,WAAvB,EAAoC;AAAE,aAAO,KAAK,IAAL,EAAW,MAAX,EAAmB,KAAnB,CAAP,CAAF;KAAxC;AACA,WAAO,KAAK,IAAL,EAAW,MAAX,EAAmB,WAAnB,CAAP,CAHyC;GAAjB,CAA1B,CADgI;CAAjC,CAAjG,EAMI,UAAC,GAAD,EAAM,GAAN,EAAc;AAChB,MAAI,IAAJ,CAAS,EAAE,eAAe,IAAI,MAAJ,CAAW,aAAX,EAA0B,MAAM,IAAI,IAAJ,EAAU,QAAQ,IAAI,MAAJ,CAAW,MAAX,EAA5E,EADgB;CAAd,CANJ;;;;;;;;;AAiBA,IAAI,IAAJ,CAAS,WAAT,EAAsB,mBAAS,YAAT,CAAsB,KAAtB,EAA6B,EAAE,SAAS,KAAT,EAA/B,CAAtB,EAAwE,gBAAO,QAAP,EAAxE;;;;;;;;;AAUA,IAAI,IAAJ,CAAS,QAAT,EACE,mBAAS,YAAT,CAAsB,CAAC,OAAD,EAAU,wBAAV,CAAtB,EAA2D,EAAE,SAAS,KAAT,EAA7D,CADF,EAEE,gBAAO,KAAP,EAFF,EAGE,gBAAO,YAAP,EAHF;;kBAKe","file":"oauth2.js","sourcesContent":["import passport from 'passport';\nimport { Router } from 'express';\nimport server from '../auth/oauth2';\nimport { Client } from '../db';\n\nconst api = new Router();\n\n// user authorization endpoint\n//\n// `authorization` middleware accepts a `validate` callback which is\n// responsible for validating the client making the authorization request.  In\n// doing so, is recommended that the `redirectURI` be checked against a\n// registered value, although security requirements may vary accross\n// implementations.  Once validated, the `done` callback must be invoked with\n// a `client` instance, as well as the `redirectURI` to which the user will be\n// redirected after an authorization decision is obtained.\n//\n// This middleware simply initializes a new authorization transaction.  It is\n// the application's responsibility to authenticate the user and render a dialog\n// to obtain their approval (displaying details about the client requesting\n// authorization).  We accomplish that here by routing through `ensureLoggedIn()`\n// first, and rendering the `dialog` view.\n\napi.get('/authorization', passport.authenticate('jwt', { session: false }), server.authorization((clientId, redirectURI, done) => {\n  Client.findById(clientId, (err, client) => {\n    if (err) { return done(err); }\n    if (client.redirectUrl !== redirectURI) { return done(null, client, false); }\n    return done(null, client, redirectURI);\n  });\n}), (req, res) => {\n  res.json({ transactionId: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });\n});\n\n// user decision endpoint\n//\n// `decision` middleware processes a user's decision to allow or deny access\n// requested by a client application.  Based on the grant type requested by the\n// client, the above grant middleware configured above will be invoked to send\n// a response.\n\napi.post('/decision', passport.authenticate('jwt', { session: false }), server.decision());\n\n\n// token endpoint\n//\n// `token` middleware handles client requests to exchange authorization grants\n// for access tokens.  Based on the grant type being exchanged, the above\n// exchange middleware will be invoked to handle the request.  Clients must\n// authenticate when making requests to this endpoint.\n\napi.post('/token',\n  passport.authenticate(['basic', 'oauth2-client-password'], { session: false }),\n  server.token(),\n  server.errorHandler());\n\nexport default api;\n"]}